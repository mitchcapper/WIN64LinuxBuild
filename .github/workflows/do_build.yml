name: __incl_primary_build_script
on:
  workflow_call:
    inputs:
      #if buildpkg is "script" then only the script is executed no deps or other items handled
      BuildPkg:
        required: true
        type: string
      Script: #should be relative to the repo root
        required: false
        type: string
      RequiredDeps:
        required: false
        type: string
        description: 'multi-line scalar for any required artifacts or empty string for none'
        default: ""
      NoDebugBuild:
        required: false
        type: boolean
        description: 'Only do release build'
        default: false
      InstallLatestVSTools:
        required: false
        type: boolean
        description: 'Install the very latest preview of VS Build TOOLS needed for some bug fixes'
        default: false
    outputs:
      ScriptRes:
        description: "Result of script execution (optional)"
        value: ${{ jobs.build.outputs.ScriptRes }}
env:
  CI_REQ_DOTNET_SDK_VER: 6.0.401
  NUKE_TELEMETRY_OPTOUT: 1
  BLD_CONFIG_GIT_PRINT_LAST_COMMIT_ON_CLONE: 1
  MSYS: "winsymlinks:native wincmdln"
  MSYS2_ARG_CONV_EXCL: "*"
  MSYS2_PATH_TYPE: inherit
  WLB_BASE_FOLDER: "d:/WLB"
  MSYSTEM: UCRT64
  MSYS_PATH: d:/msys64

jobs:
  build:
    name:  ${{ inputs.BuildPkg == 'script' && 'Run Script' || 'Build Package' }} - ${{matrix.Configuration}}
    runs-on: windows-latest
    environment: main
    outputs:
      ScriptRes: ${{ steps.script_step.outputs.ScriptRes }}
    defaults:
        run:
          shell: pwsh
    strategy:
      fail-fast: false
      matrix:
        BaseImage: [windows-latest]
        Configuration: [Debug, Release]  #right now the deps downloader always downloads release versions, we could use our debug libs for debug builds
        SkipDebugBuild:
            - ${{ inputs.NoDebugBuild }}
        Arch: [x64]
        #BaseImage: [windows-latest, ubuntu-latest]
        #Arch: [x86, x64]
        exclude:
          - Arch: x86
            BaseImage: ubuntu-latest
          - Configuration: Debug
            SkipDebugBuild: true
        include:
          - BaseImage: windows-latest
            platform: windows
          #- BuildPkg: grep
            #needs: [pcre2]
#          - BaseImage: ubuntu-latest
#            platform: linux
    env:
      BUILD_PKG: ${{inputs.BuildPkg}}
      SCRIPT: ${{inputs.Script}}
      Configuration: ${{matrix.Configuration}}
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          submodules: true
      - name: Set DepCache Variables
        if: ${{ inputs.RequiredDeps != '' }}
        shell: powershell
        id: vars
        env:
          DEPS: "${{ inputs.RequiredDeps }}"
        run: ${{ github.workspace }}\.github\set_dep_vars.ps1
      - name: ENV Set
        run: |
          $dir=$env:GITHUB_WORKSPACE
          $dir=$dir.replace("\","/")
          echo "WLB_SCRIPT_FOLDER=$dir" >> $env:GITHUB_ENV
          mkdir $env:WLB_BASE_FOLDER
          if ($env:Configuration -eq "Debug"){
            echo "BLD_CONFIG_BUILD_DEBUG=1" >> $env:GITHUB_ENV
          }

      - name: Restore Existing Dep Cache
        if: ${{ inputs.RequiredDeps != '' && inputs.BuildPkg != 'script' }}
        uses: actions/cache/restore@v4
        with:
          path: |
            d:/artifacts
          key: ${{ steps.vars.outputs.DepsCacheKey }}
          
      - name: Restore GNULIB cache
        uses: actions/cache/restore@v4
        with:
          path: ${{env.WLB_BASE_FOLDER}}/gnulib.git
          key: gnulib-bare
          enableCrossOsArchive: true

      - name: Get GNULIB Success Commit
        id: gnulib_commit
        run: |
          $commitFile="${{env.WLB_BASE_FOLDER}}/gnulib.git/gnulib_success_commit.txt"
          if (Test-Path -Path $commitFile) {
            $goodCommit = (Get-Content -Path $commitFile -Raw).Trim()
            echo "BLD_CONFIG_GNU_LIBS_BRANCH=$goodCommit" >> $env:GITHUB_OUTPUT
            Write-Host "Found GNULIB Success Commit: $goodCommit"
          }else {
            $basePath="${{env.WLB_BASE_FOLDER}}/gnulib.git"
            if (-not (Test-Path -Path $basePath)) {
              $basePath="${{env.WLB_BASE_FOLDER}}"
            }
            Write-Host "No GNULIB Success Commit Found files in $basePath dir:"
            Get-ChildItem -Path $basePath
          }

      - name: Move Bad DEFAULT MSYS
        shell: powershell
        run: Rename-Item c:/msys64 c:/trashmsys
      
      - name: Move Bad mingw64 #grrrr github
        shell: powershell
        run: Rename-Item c:/mingw64 c:/trashmingw64

      - name: MSYS Setup
        uses: msys2/setup-msys2@v2
        if: matrix.platform == 'windows'
        with:
          msystem: ucrt64
          location: d:\
          install: pkg-config make gperf rsync autoconf wget gettext-devel automake autogen texinfo git bison python autoconf-archive libtool flex patch

      - name: Save ENV
        run: "Get-ChildItem env: | Select-Object -Property Name, Value | ConvertTo-Json | Out-File -FilePath d:/env.json -Encoding ASCII"

      - name: Unpack / Move Artifacts
        id: artifact_unpack
        if: ${{ inputs.RequiredDeps != '' && inputs.BuildPkg != 'script' }} 
        run: ${{env.WLB_SCRIPT_FOLDER}}/.github/move_dl_artifacts.ps1
      
      - name: VSLatest Build Tools Install
        if: ${{ inputs.InstallLatestVSTools }}
        run: ${{env.WLB_SCRIPT_FOLDER}}/vs_buildtools_installer.ps1 -install_path d:/vstools
        
      - name: MSBuild Setup
        uses: microsoft/setup-msbuild@v1.1.3
        if: matrix.platform == 'windows'
        with:
          vs-prerelease: true
          msbuild-architecture: x64

      - name: Build Package
        if: ${{ inputs.BuildPkg != 'script' }}
        shell: powershell
        env:
          BLD_CONFIG_GNU_LIBS_BRANCH: ${{ steps.gnulib_commit.outputs.BLD_CONFIG_GNU_LIBS_BRANCH }}
        working-directory: ${{env.WLB_BASE_FOLDER}}
        run: ${{env.WLB_SCRIPT_FOLDER}}/vs_msys_shell_launch.ps1 "${{env.WLB_SCRIPT_FOLDER}}/build/f_$($env:BUILD_PKG)_build.sh" log_raw_build #raw build gets us a .bat file for compiling, without msys but runs make -j 1 so is much slower than without

      - name: Run Script
        id: script_step
        if: ${{ inputs.BuildPkg == 'script' }}
        shell: powershell
        working-directory: ${{env.WLB_BASE_FOLDER}}
        run: ${{env.WLB_SCRIPT_FOLDER}}/vs_msys_shell_launch.ps1 "${{env.WLB_SCRIPT_FOLDER}}/${{env.SCRIPT}}"

      - name: Debug Session
        if: ${{ failure() && (vars.DEBUG_FAIL == '1') && (runner.debug) }}
        run: ${{env.WLB_SCRIPT_FOLDER}}/.github/debug_ssh_start.ps1

      - name: Failure Artifact Upload
        if: ${{ failure() && (runner.debug) }}
        uses: actions/upload-artifact@v4
        with:
          name: FAILURE-${{env.BUILD_PKG}}${{matrix.Configuration=='Debug' && '-Debug' || ''}}
          retention-days: 2
          path: ${{env.WLB_BASE_FOLDER}}/${{env.BUILD_PKG}}
      
      - uses: actions/upload-artifact@v4
        if: ${{ inputs.BuildPkg != 'script' }}
        with:
          name: WLB-${{env.BUILD_PKG}}${{matrix.Configuration=='Debug' && '-Debug' || ''}}
          path: ${{env.WLB_BASE_FOLDER}}/${{env.BUILD_PKG}}/final
          if-no-files-found: error
      