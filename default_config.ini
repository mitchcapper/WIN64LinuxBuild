BUILD_NAME=required #ie findutils, should be the official name as we sometimes use this value to look for default libs etc
BUILD_FOLDER_NAME=[BUILD_NAME] #the folder under the base folder it will be built in

#if the var name starts with ENV_ and the value is 'env' then the var is set to the value of the environment variable with the name of the variable name without the leading ENV_
#you can set the base folder directly if desired note the path should be in the form x:/path/to/folder  as this path form works both under msys and windows
ENV_WLB_BASE_FOLDER=env
BASE_FOLDER=[ENV_WLB_BASE_FOLDER]

SRC_FOLDER=[BASE_FOLDER]/[BUILD_FOLDER_NAME]
BUILD_AUX_FOLDER=[SRC_FOLDER]/build-aux
BUILD_AUX_SCRIPTS_DEFAULT = ( "ar-lib" "compile" )
BUILD_AUX_SCRIPTS_ADDL = ()
INSTALL_FOLDER_NAME=final
PREFER_STATIC_LINKING=1 #note this is only effecting the library searching and may requireother defines, make sure to change the VCPKG triplet var (VCPKG_TRIPLET) to not have static in it as well
INSTALL_FOLDER=[SRC_FOLDER]/[INSTALL_FOLDER_NAME]
CONFIG_CMD_DEFAULT=--prefix=[INSTALL_FOLDER]
CONFIG_CMD_GNULIB_ADDL=--enable-threads=windows --disable-silent-rules
CONFIG_CMD_ADDL= "" # --disable-nls
CONFIG_ADL_LIBS= "" # -lSomeLib
CONFIG_DEFAULT_WINDOWS_LIBS="-lBcrypt -lWs2_32 -lShell32 -luser32 -lAdvapi32 -lKernel32 -lWinmm"
CONFIG_BYPASS_FILESYSTEM_LIST_FAIL=1
CONFIG_GETHOSTNAME_FIX=1

BUILD_DEBUG=0 #note for most repos this does not do anything right now
BUILD_MSVC_RUNTIME_INFO_ADD_TO_C_AND_LDFLAGS=0 #add debug/static runtime (/MT /MD etc to CFLAGS and LDFLAGS), if this is enabled the BUILD_DEBUG and PREFER_STATIC_LINKING are used to determine what exactly.  For most this is not needed, may be helpful if using with debugger.
BUILD_MSVC_CL_DEBUG_OPTS=/ZI /Zf /FS #it will also add things like /DEBUG by default, ZI=generate PDB, FS=sync PDB generation for when doing make -j X, Zf=speed up the synced PDB generation, not even with /FS it will get access errors with concurrent building.  Our make command also falls back to non-concurrent building as a backup.
BUILD_MSVC_CL_NDEBUG_OPTS=/Os #optimize for size
BUILD_MSVC_IGNORE_WARNINGS=() #ie 4700, 4711, will turn into /wd4700 ...

CONFIG_NO_TESTS=1
CONFIG_NO_PO=1
CONFIG_NO_DOCS=1

GIT_SETTINGS_DEFAULT=( "core.autocrlf false"  "core.fileMode false" "core.eol lf" "diff.ignoreAllSpace true" "apply.ignoreWhitespace change" "apply.whitespace fix" )
GIT_SETTINGS_ADDL=() #
GIT_IGNORE_DEFAULT=("*.exe" "*.obj" "*.log" "*.Plo" "*.pdb" "*.idb" "*.zip" ".deps" "*.a" "final" "proj_config.ini")
GIT_IGNORE_ADDL=()

ADD_WIN_ARGV_LIB=1 #should windows expand wildcard command line args, most of hte time we want this, something like find -name "*.c" we don't want it on

GNU_LIBS_USED=1 #0 if this is not actually a gnu app, otherwise we throw an error if we cannot find the gnu dir
GNU_LIBS_BRANCH=master #leave blank to use whatever version the app checks out
GNU_LIBS_BUILD_AUX_ONLY_USED=0
#symlink gets us unistd and lstat, lstat gets us stat, stat gets us sys_stat and filename
GNU_LIBS_DEFAULT=( "sigpipe" "sigaction" "spawn-pipe" "strtok_r" "waitpid" "windows-stat-inodes" "windows-stat-timespec" "execute" "poll" "symlink" "symlinkat" "readlink" "readlinkat" "fchmodat" "unlinkat" "fsync" "open" )
GNU_LIBS_ADDL=()
GNU_LIBS_EXCLUDE= ()
GNU_LIBS_USE_GNULIB_TOOL_PY=1
GNU_LIBS_USE_GNULIB_TOOL_PY_ADDL_MK_FILES_FIX=()
GNU_LIBS_PATCHES_DEFAULT=( "NOOP_FOR_WINDOWS_CHOWN_CHMOD_GETUSER_GETGROUP" "GNULIB_TOOL_APPLY_PATCHES_BY_FILE" "FTS_MINOR_FIXES" "BUILD_AUX_HANDLE_DOT_A_LIBS" "FIX_SYSSTAT_TIMESPEC_DISABLE_BUG" "WIN_FSUSAGE_FIXES" "WINDOWS_SYMLINK_SUPPORT" "SPAWN_PIPE_FORK_FD_FIXES" "WINDOW_PATH_FIXES" )
GNU_LIBS_PATCHES_ADDL=()

VCPKG_DIR=[BASE_FOLDER]/vcpkg
VCPKG_INSTALL_TARGET_BASEDIR=[BASE_FOLDER]/vc_pkgs
VCPKG_TRIPLET=x64-windows-static-release
VCPKG_BINARY_DIR=[VCPKG_DIR]/archive
VCPKG_BIN=[VCPKG_DIR]/vcpkg.exe

LOG_DEBUG_WRAPPERS=1 #enable debug mode for build-aux wrappers, show input and output, essentially sets DEBUG_GNU_COMPILE_WRAPPER=1 DEBUG_GNU_LIB_WRAPPER=1
LOG_COLOR_HIGHLIGHT=1 #when using some of our command wrappers do minimal coloring of the output
LOG_ON_AT_INIT=1
LOG_OFF_AT_FINAL=1
LOG_IGNORE_CMDS_EXACT_DEFAULT= ( "LOGOFF" "trap - debug" "LOGON" "ourmain" )
LOG_IGNORE_CMDS_EXACT_ADDL=()
LOG_IGNORE_CMDS_REGEX_DEFAULT=( "IFS=' ' read" "^\\(\\(" )
LOG_IGNORE_CMDS_REGEX_ADDL=(  )
LOG_FILE="[BASE_FOLDER]/[BUILD_FOLDER_NAME]-cmd.log"
LOG_MAKE_CMD_FILE="[BASE_FOLDER]/[BUILD_FOLDER_NAME]-make.log" #must call log_make to generate
LOG_CONFIG_ENV_FILE="[BASE_FOLDER]/[BUILD_FOLDER_NAME]-env.log"
LOG_CONFIGURE_FILE="[BASE_FOLDER]/[BUILD_FOLDER_NAME]-configure.log"
LOG_EXPAND_VARS=0 #This is a safeish way to expand the variables in commands but it is pretty slow, also note expanding the command manually is not error proof, any bash vars declared local won't be avail, and if there is a global var with the same name it will appear instead.
LOG_FILE_AUTOTAIL=0
LOG_IGNORE_REPEAT_LINES=1
STACKTRACE_ON_FAIL=1
EXPAND_FAILED_CMD_ON_STACKTRACE=1 #Note expanding the command manually is not error proof, any bash vars declared local won't be avail, and if there is a global var with the same name it will appear instead.
PRINT_VARS_AT_START=0