diff --git a/bootstrap.conf b/bootstrap.conf
index fcea3310a..67747751a 100644
--- a/bootstrap.conf
+++ b/bootstrap.conf
@@ -50,7 +50,6 @@ bison      2.4
 gettext    0.17
 git        1.4.4
 gperf      -
-gtkdocize  -
 perl       5.5
 wget       -
 "
diff --git a/lib/accelerated/x86/x86-common.c b/lib/accelerated/x86/x86-common.c
index 3b779865e..e296f46c4 100644
--- a/lib/accelerated/x86/x86-common.c
+++ b/lib/accelerated/x86/x86-common.c
@@ -44,7 +44,18 @@
 #define __get_cpuid(...) 0
 #define __get_cpuid_count(...) 0
 #endif
+#ifdef _MSC_VER
+int
+__get_cpuid_max(unsigned int e, unsigned int *s)
+{
+	uint32_t cpuinfo[4];
 
+	__cpuid(cpuinfo, e);
+	if (s)
+		*s = cpuinfo[1];
+	return cpuinfo[0];
+}
+#endif
 /* ebx, ecx, edx 
  * This is a format compatible with openssl's CPUID detection.
  */
@@ -132,8 +143,16 @@ static inline void get_cpuid_level7(unsigned int *eax, unsigned int *ebx,
 	/* we avoid using __get_cpuid_count, because it is not available with gcc 4.8 */
 	if (__get_cpuid_max(7, 0) < 7)
 		return;
-
+#ifndef _MSC_VER
 	__cpuid_count(7, 0, *eax, *ebx, *ecx, *edx);
+#else
+	int regs_array[4];
+	__cpuidex(regs_array, 7, 0);
+	*eax = regs_array[0];
+	*ebx = regs_array[1];
+	*ecx = regs_array[2];
+	*edx = regs_array[3];
+#endif
 	return;
 }
 #else
diff --git a/lib/debug.c b/lib/debug.c
index 53a142cf5..d12bb4cf9 100644
--- a/lib/debug.c
+++ b/lib/debug.c
@@ -28,10 +28,12 @@
 #include "mpi.h"
 
 #ifdef DEBUG
+#define MAX_VECTOR_SIZE 1024*5
+#define DUMP_MPI_BUF_SIZE 400
 void _gnutls_dump_mpi(const char *prefix, bigint_t a)
 {
-	char buf[400];
-	char buf_hex[2 * sizeof(buf) + 1];
+	char buf[DUMP_MPI_BUF_SIZE];
+	char buf_hex[2 * sizeof(char)*DUMP_MPI_BUF_SIZE + 1];
 	size_t n = sizeof buf;
 
 	if (_gnutls_mpi_print(a, buf, &n))
@@ -43,7 +45,7 @@ void _gnutls_dump_mpi(const char *prefix, bigint_t a)
 
 void _gnutls_dump_vector(const char *prefix, const uint8_t *a, size_t a_size)
 {
-	char buf_hex[2 * a_size + 1];
+	char buf_hex[2 * MAX_VECTOR_SIZE + 1];
 
 	_gnutls_debug_log("Vector: length: %d\n\t%s%s\n", (int)a_size, prefix,
 			  _gnutls_bin2hex(a, a_size, buf_hex, sizeof(buf_hex),
diff --git a/lib/errors.h b/lib/errors.h
index 891c5dfd1..9b7b59ab5 100644
--- a/lib/errors.h
+++ b/lib/errors.h
@@ -139,6 +139,7 @@ void _gnutls_mpi_log(const char *prefix, bigint_t a);
 		}                                                              \
 	} while (0)
 
+#ifndef _WIN32
 #ifdef C99_MACROS
 #define LEVEL(l, ...)                                 \
 	do {                                          \
@@ -175,6 +176,27 @@ void _gnutls_mpi_log(const char *prefix, bigint_t a);
 void _gnutls_null_log(void *, ...);
 
 #endif /* C99_MACROS */
+#else
+#define LEVEL(l, str, ...) \
+	do { \
+		if (unlikely(_gnutls_log_level >= l)) \
+			_gnutls_log(l, str, __VA_ARGS__); \
+	} while (0)
+#define _gnutls_debug_log(str, ...) LEVEL(2, str, ##__VA_ARGS__)
+#define _gnutls_assert_log(str, ...) LEVEL(3, str, ##__VA_ARGS__)
+#define _gnutls_handshake_log(str, ...) LEVEL(4, str, ##__VA_ARGS__)
+#define _gnutls_record_log(str, ...) LEVEL(5, str, ##__VA_ARGS__)
+#define _gnutls_dtls_log(str, ...) LEVEL(6, str, ##__VA_ARGS__)
+
+#define _gnutls_hard_log(str, ...) LEVEL(9, str, ##__VA_ARGS__)
+
+#define _gnutls_read_log(str, ...) LEVEL(10, str, ##__VA_ARGS__)
+#define _gnutls_write_log(str, ...) LEVEL(11, str, ##__VA_ARGS__)
+#define _gnutls_io_log(str, ...) LEVEL(12, str, ##__VA_ARGS__)
+#define _gnutls_buffers_log(str, ...) LEVEL(13, str, ##__VA_ARGS__)
+#define _gnutls_no_log(str, ...) LEVEL(INT_MAX, str, ##__VA_ARGS__)	
+void _gnutls_null_log(void *, ...);
+#endif
 
 /* GCC won't inline this by itself and results in a "fatal warning"
    otherwise. Making this a macro has been tried, but it interacts
@@ -186,7 +208,7 @@ static inline
 #endif
 	int
 	gnutls_assert_val_int(int val, const char *file, const char *func,
-			      int line)
+			 	     int line)
 {
 	_gnutls_assert_log("ASSERT: %s[%s]:%d\n", file, func, line);
 	return val;
diff --git a/lib/global.c b/lib/global.c
index 42d90ee9d..d9290ca69 100644
--- a/lib/global.c
+++ b/lib/global.c
@@ -49,11 +49,12 @@
 #ifdef __sun
 #pragma fini(lib_deinit)
 #pragma init(lib_init)
-#define _CONSTRUCTOR
-#define _DESTRUCTOR
+#define CONSTRUCTOR(f) \
+        static void f(void)
 #else
-#define _CONSTRUCTOR __attribute__((constructor))
-#define _DESTRUCTOR __attribute__((destructor))
+// this will work for windows or non windows systems
+#define WLB_CONSTRUCTOR_SUPPORT
+#include "../osfixes.h"
 #endif
 
 #ifndef _WIN32
@@ -501,7 +502,12 @@ const char *gnutls_check_version(const char *req_version)
 	return NULL;
 }
 
-static void _CONSTRUCTOR lib_init(void)
+
+
+
+
+
+static void lib_deinit(void)
 {
 	int ret;
 	const char *e;
@@ -525,29 +531,21 @@ static void _CONSTRUCTOR lib_init(void)
 			return;
 	}
 
-	ret = _gnutls_global_init(1);
-	if (ret < 0) {
-		fprintf(stderr, "Error in GnuTLS initialization: %s\n",
-			gnutls_strerror(ret));
-		_gnutls_switch_lib_state(LIB_STATE_ERROR);
-	}
+	_gnutls_global_deinit(1);
 }
-
-static void _DESTRUCTOR lib_deinit(void)
+CONSTRUCTOR(lib_init)
 {
 	int ret;
 	const char *e;
-
 	if (_gnutls_global_init_skip() != 0)
 		return;
-
+	atexit(lib_deinit);
 	e = secure_getenv("GNUTLS_NO_IMPLICIT_INIT");
 	if (e != NULL) {
 		ret = atoi(e);
 		if (ret == 1)
 			return;
 	}
-
 	e = secure_getenv("GNUTLS_NO_EXPLICIT_INIT");
 	if (e != NULL) {
 		_gnutls_debug_log(
@@ -556,8 +554,12 @@ static void _DESTRUCTOR lib_deinit(void)
 		if (ret == 1)
 			return;
 	}
-
-	_gnutls_global_deinit(1);
+	ret = _gnutls_global_init(1);
+	if (ret < 0) {
+		fprintf(stderr, "Error in GnuTLS initialization: %s\n",
+			gnutls_strerror(ret));
+		_gnutls_switch_lib_state(LIB_STATE_ERROR);
+	}
 }
 
 static const struct gnutls_library_config_st _gnutls_library_config[] = {
diff --git a/lib/x509/verify-high2.c b/lib/x509/verify-high2.c
index dc975baeb..208b89d47 100644
--- a/lib/x509/verify-high2.c
+++ b/lib/x509/verify-high2.c
@@ -384,7 +384,7 @@ static int load_dir_certs(const char *dirname, gnutls_x509_trust_list_t list,
 	int r = 0;
 	struct gnutls_pathbuf_st pathbuf;
 
-#if !defined(_WIN32) || !defined(_UNICODE)
+#if 1
 	DIR *dirp;
 	struct dirent *d;
 
