diff --git a/src/common.h b/src/common.h
index 6bc6c39..89bdf33 100644
--- a/src/common.h
+++ b/src/common.h
@@ -127,11 +127,18 @@ _Noreturn void fatal_exit (void);
 #if ! (HAVE_GETEUID || defined geteuid)
 # if ! (HAVE_GETUID || defined getuid)
 #  define geteuid() (-1)
+#  define getegid() (-1)
 # else
 #  define geteuid() getuid ()
 # endif
 #endif
 
+
+#ifdef _WIN32
+#define READ_MODE_ALWAYS_BINARY_FOR_W32 O_BINARY
+#else
+#define READ_MODE_ALWAYS_BINARY_FOR_W32 0
+#endif
 #ifdef HAVE_SETMODE_DOS
   extern int binary_transput;	/* O_BINARY if binary i/o is desired */
 #else
diff --git a/src/merge.c b/src/merge.c
index 69ffceb..fbfc7af 100644
--- a/src/merge.c
+++ b/src/merge.c
@@ -38,6 +38,7 @@ static void compute_changes (idx_t, idx_t, idx_t, idx_t, char *, char *);
 #define NOTE_DELETE(ctxt, xoff) ctxt->xchar[xoff] = '-';
 #define NOTE_INSERT(ctxt, yoff) ctxt->ychar[yoff] = '+';
 #define USE_HEURISTIC 1
+#define OFFSET_MAX PTRDIFF_MAX
 #include "diffseq.h"
 
 static idx_t
diff --git a/src/patch.c b/src/patch.c
index 49daa0e..ca5a875 100644
--- a/src/patch.c
+++ b/src/patch.c
@@ -399,7 +399,7 @@ main (int argc, char **argv)
 	if (!skip_rest_of_patch) {
 	    if (S_ISREG (file_type) && instat.st_size != 0)
 	      {
-		int oflags = (O_RDONLY | binary_transput
+		int oflags = (O_RDONLY | binary_transput | READ_MODE_ALWAYS_BINARY_FOR_W32
 			      | (follow_symlinks ? 0 : O_NOFOLLOW));
 		ifd = safe_open (inname, oflags, 0);
 		if (ifd < 0)
@@ -1616,7 +1616,7 @@ static void
 init_reject (char const *outname)
 {
   int fd;
-  fd = make_tempfile (&tmprej, 'r', outname, O_WRONLY | binary_transput, 0666);
+  fd = make_tempfile (&tmprej, 'r', outname, O_WRONLY | binary_transput | READ_MODE_ALWAYS_BINARY_FOR_W32, 0666);
   if (fd < 0)
     pfatal ("Can't create temporary file %s", tmprej.name);
   rejfp = fdopen (fd, binary_transput ? "wb" : "w");
diff --git a/src/pch.c b/src/pch.c
index 0d5fd84..aa61954 100644
--- a/src/pch.c
+++ b/src/pch.c
@@ -127,13 +127,13 @@ open_patch_file (char const *filename)
       pfp = stdin;
     else
       {
-	pfp = fopen (filename, binary_transput ? "rb" : "r");
+	pfp = fopen (filename, binary_transput | READ_MODE_ALWAYS_BINARY_FOR_W32 ? "rb" : "r");
 	if (!pfp)
 	  pfatal ("Can't open patch file %s", quotearg (filename));
       }
     int pfd = fileno (pfp);
 #if HAVE_SETMODE_DOS
-    if (binary_transput)
+    if (binary_transput | READ_MODE_ALWAYS_BINARY_FOR_W32)
       {
 	if (isatty (pfd))
 	  fatal ("cannot read binary data from tty on this platform");
@@ -2391,7 +2391,7 @@ do_ed_script (char *input_name, struct outfile *output, FILE *ofp)
 
     if (ofp)
       {
-	FILE *ifp = fopen (output_name, binary_transput ? "rb" : "r");
+	FILE *ifp = fopen (output_name, binary_transput | READ_MODE_ALWAYS_BINARY_FOR_W32 ? "rb" : "r");
 	int c;
 	if (!ifp)
 	  pfatal ("can't open '%s'", output_name);
diff --git a/src/safe.c b/src/safe.c
index 2aafbca..12eb1fc 100644
--- a/src/safe.c
+++ b/src/safe.c
@@ -103,6 +103,7 @@ static void free_cached_dirfd (struct cached_dirfd *entry)
 
 static void init_dirfd_cache (void)
 {
+#ifndef _WIN32
   struct rlimit nofile;
 
   if (getrlimit (RLIMIT_NOFILE, &nofile) == 0)
@@ -114,7 +115,10 @@ static void init_dirfd_cache (void)
     }
   else
     max_cached_fds = min_cached_fds;
+#else
+	min_cached_fds = max_cached_fds = OPEN_MAX;
 
+#endif
   cached_dirfds = hash_initialize (min_cached_fds, nullptr,
 				   hash_cached_dirfd,
 				   compare_cached_dirfds, nullptr);
@@ -564,7 +568,7 @@ safe_xstat (char *pathname, struct stat *buf, int flags)
   int dirfd;
 
   if (unsafe)
-    return fstatat (AT_FDCWD, pathname, buf, flags);
+	  return fstatat (AT_FDCWD, pathname, buf, flags);
 
   dirfd = traverse_path (&pathname);
   if (dirfd == DIRFD_INVALID)
diff --git a/src/safe.h b/src/safe.h
index 57c0e74..1d838c4 100644
--- a/src/safe.h
+++ b/src/safe.h
@@ -27,6 +27,13 @@ enum { DIRFD_INVALID = -1 - (AT_FDCWD == -1) };
 
 extern bool unsafe;
 
+#if defined _WIN32
+typedef unsigned long rlim_t;
+#define OPEN_MAX 256 //from cygwin
+#define RLIM_INFINITY	(~0UL)
+#define PATH_MAX 260
+#endif
+
 int safe_stat (char *pathname, struct stat *buf);
 int safe_lstat (char *pathname, struct stat *buf);
 int safe_open (char *pathname, int flags, mode_t mode);
diff --git a/src/util.c b/src/util.c
index 2a90ca0..0260bc2 100644
--- a/src/util.c
+++ b/src/util.c
@@ -316,6 +316,7 @@ set_file_attributes (char *to, int tofd, enum file_attributes attr,
 		S_ISLNK (mode) ? "symbolic link" : "file",
 		quotearg (to));
     }
+#ifndef  _WIN32
   if (attr & FA_IDS)
     {
       uid_t uid_1 = -1;
@@ -351,6 +352,7 @@ set_file_attributes (char *to, int tofd, enum file_attributes attr,
 		S_ISLNK (mode) ? "symbolic link" : "file",
 		quotearg (to));
     }
+
   if (attr & FA_XATTRS)
     if (copy_attr (from, fromfd, to, tofd) < 0
 	&& errno != ENOSYS && errno != ENOTSUP
@@ -367,6 +369,7 @@ set_file_attributes (char *to, int tofd, enum file_attributes attr,
 		S_ISLNK (mode) ? "symbolic link" : "file",
 		quotearg (to));
     }
+  #endif //  _WIN32
 }
 
 static void
@@ -1227,7 +1230,9 @@ init_signals (void)
 {
   static int const sigs[] =
     {
+#ifdef SIGHUP
       SIGHUP,
+#endif      
       SIGINT,
 #ifdef SIGPIPE
       SIGPIPE,
@@ -1243,9 +1248,10 @@ init_signals (void)
 #endif
     };
   enum { NUM_SIGS = sizeof sigs / sizeof *sigs };
-
+#ifndef _WIN32
   /* System V fork+wait does not work if SIGCHLD is ignored.  */
   signal (SIGCHLD, SIG_DFL);
+#endif  
 
 #if HAVE_SIGACTION && HAVE_SIGFILLSET
   struct sigaction fatal_act = { .sa_handler = handle_signal };
@@ -1870,12 +1876,21 @@ cwd_is_root (char const *name)
     }
   else
     {
+#ifndef _WIN32	
       char root[4];
+#else
+      char * root = xmalloc (sizeof(char) * (prefix_len + 2));
+#endif	  
       memcpy (root, name, prefix_len);
       root[prefix_len] = '/';
       root[prefix_len + 1] = 0;
-      if (stat (root, &st) < 0)
+	  int res = stat (root, &st);
+#ifdef _WIN32
+	  free (root);
+#endif
+      if (res < 0)
 	return false;
+
       root_dev = st.st_dev;
       root_ino = st.st_ino;
     }
