diff --git a/find/exec.c b/find/exec.c
index c9cda8af..822532b3 100644
--- a/find/exec.c
+++ b/find/exec.c
@@ -309,10 +309,49 @@ launch (struct buildcmd_control *ctl, void *usercontext, int argc, char **argv)
   if (first_time)
     {
       first_time = 0;
+#ifndef _WIN32
       signal (SIGCHLD, SIG_DFL);
+#endif
     }
-
-  child_pid = fork ();
+#ifdef _WIN32
+      if (bc_args_exceed_testing_limit (argv))
+	      errno = E2BIG;
+      else
+      {
+        int fd_stdin = dup(STDIN_FILENO);//backup stdin incase prep changes it
+        prep_child_for_exec (execp->close_stdin, execp->wd_for_exec);
+        if (fd_leak_check_is_enabled ())
+          {
+            complain_about_leaky_fds ();
+          }
+        errno = execute(argv[0],argv[0],argv,NULL,false,false,false,false,true,false,NULL);
+        dup2(fd_stdin,STDIN_FILENO);//restore stdin
+        close(fd_stdin);
+      }
+
+if (errno != 0){
+		 if (E2BIG == errno)
+	      {
+          state.exit_status = EXIT_FAILURE;
+		return 0; /* Failure; caller should pass fewer args */
+	      }
+	    else if (ENOENT == errno)
+	      {
+          state.exit_status = EXIT_FAILURE;
+		return 0;
+	      }
+	    else
+	      {
+          state.exit_status = EXIT_FAILURE;
+		return 0;
+	      }
+	}else
+        return 1;			/* OK */
+
+
+#else
+  child_pid= fork ();
+#endif
   if (child_pid == -1)
     die (EXIT_FAILURE, errno, _("cannot fork"));
   if (child_pid == 0)
diff --git a/find/fstype.c b/find/fstype.c
index 47f1ff71..5fcf626a 100644
--- a/find/fstype.c
+++ b/find/fstype.c
@@ -113,6 +113,7 @@ in_afs (char *path)
 static struct mount_entry *
 get_file_system_list (bool need_fs_type)
 {
+  #ifndef _WIN32
   /* Local cache for the mount list.  */
   static struct mount_entry *mount_list = NULL;
 
@@ -130,6 +131,9 @@ get_file_system_list (bool need_fs_type)
       has_fstype = need_fs_type;
     }
   return mount_list;
+  #else
+  return NULL;
+#endif  
 }
 
 /* Return a static string naming the type of file system that the file PATH,
@@ -160,6 +164,7 @@ filesystem_type (const struct stat *statp, const char *path)
 bool
 is_used_fs_type(const char *name)
 {
+  #ifndef _WIN32
   if (0 == strcmp("afs", name))
     {
       /* I guess AFS may not appear in /etc/mtab (or equivalent) but still be in use,
@@ -183,6 +188,7 @@ is_used_fs_type(const char *name)
 	  return true;
 	}
     }
+#endif
   return false;
 }
 
@@ -274,6 +280,7 @@ file_system_type_uncached (const struct stat *statp, const char *path,
 dev_t *
 get_mounted_devices (size_t *n)
 {
+#ifndef _WIN32
   size_t alloc_size = 0u;
   size_t used = 0u;
   struct mount_entry *entries, *entry;
@@ -311,4 +318,7 @@ get_mounted_devices (size_t *n)
       *n = used;
     }
   return result;
+#else
+  return NULL;
+#endif  
 }
diff --git a/find/parser.c b/find/parser.c
index 78c3f969..e8eb8226 100644
--- a/find/parser.c
+++ b/find/parser.c
@@ -23,9 +23,12 @@
 #include <ctype.h>
 #include <errno.h>
 #include <fcntl.h>
+#ifndef _WIN32
 #include <grp.h>
-#include <math.h>
 #include <pwd.h>
+#endif
+#include <math.h>
+
 #include <regex.h>
 #include <sys/stat.h>
 #include <unistd.h>
@@ -1134,6 +1137,7 @@ parse_gid (const struct parser_table* entry, char **argv, int *arg_ptr)
 static bool
 parse_group (const struct parser_table* entry, char **argv, int *arg_ptr)
 {
+  #ifndef _WIN32
   const char *groupname;
   const int saved_argc = *arg_ptr;
 
@@ -1193,6 +1197,9 @@ parse_group (const struct parser_table* entry, char **argv, int *arg_ptr)
       return true;
     }
   return false;
+  #else
+  return true;
+  #endif;
 }
 
 static bool
@@ -2442,6 +2449,7 @@ parse_used (const struct parser_table* entry, char **argv, int *arg_ptr)
 static bool
 parse_user (const struct parser_table* entry, char **argv, int *arg_ptr)
 {
+  #ifndef _WIN32
   const char *username;
 
   if (collect_arg (argv, arg_ptr, &username))
@@ -2488,6 +2496,9 @@ parse_user (const struct parser_table* entry, char **argv, int *arg_ptr)
       return true;
     }
   return false;
+  #else
+  return true;
+  #endif
 }
 
 static bool
diff --git a/find/pred.c b/find/pred.c
index b5a642b4..ce02c54f 100644
--- a/find/pred.c
+++ b/find/pred.c
@@ -24,9 +24,14 @@
 #include <dirent.h>
 #include <errno.h>
 #include <fcntl.h>
+#ifndef _WIN32
 #include <grp.h>
-#include <math.h>
 #include <pwd.h>
+#else
+# define S_IFBLK 0
+#endif
+#include <math.h>
+
 #include <selinux/selinux.h>
 #include <stdarg.h>
 #include <sys/stat.h>
@@ -671,17 +676,25 @@ pred_newerXY (const char *pathname, struct stat *stat_buf, struct predicate *pre
 bool
 pred_nogroup (const char *pathname, struct stat *stat_buf, struct predicate *pred_ptr)
 {
+#ifndef _WIN32
   (void) pathname;
   (void) pred_ptr;
   return getgrgid (stat_buf->st_gid) == NULL;
+#else
+  return true;
+#endif  
 }
 
 bool
 pred_nouser (const char *pathname, struct stat *stat_buf, struct predicate *pred_ptr)
 {
+#ifndef _WIN32  
   (void) pathname;
   (void) pred_ptr;
   return getpwuid (stat_buf->st_uid) == NULL;
+#else
+  return true;
+#endif    
 }
 
 
diff --git a/find/print.c b/find/print.c
index b04bfef8..108c5010 100644
--- a/find/print.c
+++ b/find/print.c
@@ -22,9 +22,12 @@
 #include <assert.h>
 #include <ctype.h>
 #include <errno.h>
+#ifndef _WIN32
 #include <grp.h>
-#include <math.h>
 #include <pwd.h>
+#endif
+#include <math.h>
+
 #include <stdarg.h>
 #include <sys/stat.h>
 #include <sys/types.h>
@@ -933,6 +936,7 @@ do_fprintf (struct format_val *dest,
           checked_print_quoted (dest, segment->text, filesystem_type (stat_buf, pathname));
           break;
         case 'g':               /* group name */
+#ifndef _WIN32
           /* trusted */
           /* (well, the actual group is selected by the user but
            * its name was selected by the system administrator)
@@ -949,13 +953,16 @@ do_fprintf (struct format_val *dest,
               }
           }
           FALLTHROUGH; /*...sometimes, so 'G' case.*/
-
+#endif
         case 'G':               /* GID number */
+#ifndef _WIN32        
           /* UNTRUSTED, probably unexploitable */
           checked_fprintf (dest, segment->text,
                            human_readable ((uintmax_t) stat_buf->st_gid, hbuf,
                                            human_ceiling, 1, 1));
+#endif
           break;
+
         case 'h':               /* leading directories part of path */
           /* sanitised */
           {
@@ -1141,6 +1148,7 @@ do_fprintf (struct format_val *dest,
           break;
 
         case 'u':               /* user name */
+#ifndef _WIN32        
           /* trusted */
           /* (well, the actual user is selected by the user on systems
            * where chown is not restricted, but the user name was
@@ -1158,12 +1166,14 @@ do_fprintf (struct format_val *dest,
               }
           }
           FALLTHROUGH; /* .. to case U */
-
+#endif
         case 'U':               /* UID number */
+#ifndef _WIN32
           /* UNTRUSTED, probably unexploitable */
           checked_fprintf (dest, segment->text,
                            human_readable ((uintmax_t) stat_buf->st_uid, hbuf,
                                            human_ceiling, 1, 1));
+#endif          
           break;
 
           /* %Y: type of file system entry like `ls -l`:
diff --git a/find/util.c b/find/util.c
index e2a2c244..ff81e577 100644
--- a/find/util.c
+++ b/find/util.c
@@ -198,8 +198,8 @@ Tests (N can be +N or -N or N):\n\
 Actions:\n\
       -delete -print0 -printf FORMAT -fprintf FILE FORMAT -print \n\
       -fprint0 FILE -fprint FILE -ls -fls FILE -prune -quit\n\
-      -exec COMMAND ; -exec COMMAND {} + -ok COMMAND ;\n\
-      -execdir COMMAND ; -execdir COMMAND {} + -okdir COMMAND ;\n"));
+      -exec COMMAND \";\" -exec COMMAND {} + -ok COMMAND \";\"\n\
+      -execdir COMMAND \";\" -execdir COMMAND {} + -okdir COMMAND \";\"\n"));
 
   HTL (_("\n\
 Other common options:\n"));
diff --git a/lib/buildcmd.c b/lib/buildcmd.c
index 9412b230..8e337087 100644
--- a/lib/buildcmd.c
+++ b/lib/buildcmd.c
@@ -24,8 +24,13 @@
 #include <stdbool.h>
 #include <stdlib.h>
 #include <string.h>
+#ifndef _WIN32
 #ifndef _POSIX_SOURCE
-# include <sys/param.h>
+#include <sys/param.h>
+#endif
+#else
+#define _POSIX_ARG_MAX 32767
+#define ARG_MAX 32767
 #endif
 #include <unistd.h>
 #include <wchar.h>
diff --git a/lib/fdleak.c b/lib/fdleak.c
index 87ece559..93b680b6 100644
--- a/lib/fdleak.c
+++ b/lib/fdleak.c
@@ -31,7 +31,9 @@
 # include <sys/resource.h>
 #endif
 #include <unistd.h>
-
+#ifdef _WIN32
+#define _POSIX_OPEN_MAX 16
+#endif
 /* gnulib headers. */
 #include "cloexec.h"
 #include "dirent--.h"
@@ -114,9 +116,10 @@ get_max_fd (void)
   open_max = get_proc_max_fd ();
   if (open_max >= 0)
     return open_max;
-
+#ifndef _WIN32
   open_max = sysconf (_SC_OPEN_MAX);
   if (open_max == -1)
+#endif  
     open_max = _POSIX_OPEN_MAX;	/* underestimate */
 
   /* We assume if RLIMIT_NOFILE is defined, all the related macros are, too. */
diff --git a/lib/listfile.c b/lib/listfile.c
index 3f0397b5..2d61931b 100644
--- a/lib/listfile.c
+++ b/lib/listfile.c
@@ -21,8 +21,10 @@
 #include <alloca.h>
 #include <errno.h>
 #include <fcntl.h>
+#ifndef _WIN32
 #include <grp.h>
 #include <pwd.h>
+#endif
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
diff --git a/lib/regextype.c b/lib/regextype.c
index 9c3c7788..98dc5611 100644
--- a/lib/regextype.c
+++ b/lib/regextype.c
@@ -49,15 +49,15 @@ static struct tagRegexTypeMap regex_map[] =
   {
    { "findutils-default",     CONTEXT_FINDUTILS, RE_SYNTAX_EMACS|RE_DOT_NEWLINE  },
    { "ed",                    CONTEXT_GENERIC,   RE_SYNTAX_ED                    },
-   { "emacs",                 CONTEXT_ALL,       RE_SYNTAX_EMACS                 },
-   { "gnu-awk",               CONTEXT_ALL,       RE_SYNTAX_GNU_AWK               },
-   { "grep",                  CONTEXT_ALL,       RE_SYNTAX_GREP                  },
-   { "posix-awk",             CONTEXT_ALL,       RE_SYNTAX_POSIX_AWK             },
-   { "awk",                   CONTEXT_ALL,       RE_SYNTAX_AWK                   },
-   { "posix-basic",           CONTEXT_ALL,       RE_SYNTAX_POSIX_BASIC           },
-   { "posix-egrep",           CONTEXT_ALL,       RE_SYNTAX_POSIX_EGREP           },
-   { "egrep",                 CONTEXT_ALL,       RE_SYNTAX_EGREP                 },
-   { "posix-extended",        CONTEXT_ALL,       RE_SYNTAX_POSIX_EXTENDED        },
+   { "emacs",                 GNU_CONTEXT_ALL,       RE_SYNTAX_EMACS                 },
+   { "gnu-awk",               GNU_CONTEXT_ALL,       RE_SYNTAX_GNU_AWK               },
+   { "grep",                  GNU_CONTEXT_ALL,       RE_SYNTAX_GREP                  },
+   { "posix-awk",             GNU_CONTEXT_ALL,       RE_SYNTAX_POSIX_AWK             },
+   { "awk",                   GNU_CONTEXT_ALL,       RE_SYNTAX_AWK                   },
+   { "posix-basic",           GNU_CONTEXT_ALL,       RE_SYNTAX_POSIX_BASIC           },
+   { "posix-egrep",           GNU_CONTEXT_ALL,       RE_SYNTAX_POSIX_EGREP           },
+   { "egrep",                 GNU_CONTEXT_ALL,       RE_SYNTAX_EGREP                 },
+   { "posix-extended",        GNU_CONTEXT_ALL,       RE_SYNTAX_POSIX_EXTENDED        },
    { "posix-minimal-basic",   CONTEXT_GENERIC,   RE_SYNTAX_POSIX_MINIMAL_BASIC   },
    { "sed",                   CONTEXT_GENERIC,   RE_SYNTAX_SED                   },
    /*    ,{ "posix-common",   CONTEXT_GENERIC,  _RE_SYNTAX_POSIX_COMMON   } */
diff --git a/lib/regextype.h b/lib/regextype.h
index 382dcc88..012f65d5 100644
--- a/lib/regextype.h
+++ b/lib/regextype.h
@@ -29,7 +29,7 @@ int get_regex_type(const char *s);
 enum {
   CONTEXT_FINDUTILS = 1u,
   CONTEXT_GENERIC   = 2u,
-  CONTEXT_ALL = CONTEXT_GENERIC|CONTEXT_FINDUTILS,
+  GNU_CONTEXT_ALL = CONTEXT_GENERIC|CONTEXT_FINDUTILS,
 };
 
 
diff --git a/locate/locate.c b/locate/locate.c
index a7f5eb75..d8310fc7 100644
--- a/locate/locate.c
+++ b/locate/locate.c
@@ -66,7 +66,9 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <getopt.h>
+#ifndef _WIN32
 #include <grp.h>                /* for setgroups() */
+#endif
 #include <regex.h>
 #include <signal.h>
 #include <stdbool.h>
@@ -1418,6 +1420,7 @@ static struct option const longopts[] =
 static int
 drop_privs (void)
 {
+#ifndef _WIN32  
   const char * what = "failed";
   const uid_t orig_euid = geteuid ();
   const uid_t uid       = getuid ();
@@ -1493,7 +1496,11 @@ drop_privs (void)
   die (EXIT_FAILURE, errno, "%s",
        quotearg_n_style (0, locale_quoting_style, what));
   abort ();
+  #ifndef _WIN32
   kill (0, SIGKILL);
+  #else
+  kill (0, SIGBREAK);
+  #endif
   _exit (1);
   /*NOTREACHED*/
   /* ... we hope. */
@@ -1501,6 +1508,7 @@ drop_privs (void)
     {
       /* deliberate infinite loop */
     }
+    #endif
 }
 
 static int
@@ -1514,11 +1522,13 @@ opendb (const char *name)
   if (fd >= 0)
     {
       /* Make sure it won't survive an exec */
+#ifndef _WIN32
       if (0 != fcntl (fd, F_SETFD, FD_CLOEXEC))
         {
           close (fd);
           fd = -1;
         }
+#endif        
     }
   return fd;
 }
diff --git a/xargs/xargs.c b/xargs/xargs.c
index 96e8897f..5dee96ab 100644
--- a/xargs/xargs.c
+++ b/xargs/xargs.c
@@ -46,10 +46,14 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <execute.h>
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <unistd.h>
 #include <wchar.h>
+#ifdef _WIN32
+#define ARG_MAX 4096
+#endif
 
 /* gnulib headers. */
 #include "closein.h"
@@ -816,7 +820,9 @@ main (int argc, char **argv)
   bc_state.argbuf = xmalloc (bc_ctl.arg_max + 1);
 
   /* Make sure to listen for the kids.  */
+#ifndef _WIN32
   signal (SIGCHLD, SIG_DFL);
+#endif
 
   if (!bc_ctl.replace_pat)
     {
@@ -1233,7 +1239,11 @@ prep_child_for_exec (void)
   if (!keep_stdin || open_tty)
     {
       int fd;
+	  #ifndef _WIN32
       const char *inputfile = open_tty ? "/dev/tty" : "/dev/null";
+	  #else
+	  const char *inputfile = open_tty ? "\\\\.\\CON" : "NUL";
+	  #endif
 
       close (0);
       if ((fd = open (inputfile, O_RDONLY)) < 0)
@@ -1278,7 +1288,11 @@ static int
 xargs_do_exec (struct buildcmd_control *ctl, void *usercontext, int argc, char **argv)
 {
   pid_t child;
+  #ifndef _WIN32
   int fd[2];
+#else
+	int fd[1];
+#endif
   int buf;
   size_t r;
 
@@ -1309,7 +1323,8 @@ xargs_do_exec (struct buildcmd_control *ctl, void *usercontext, int argc, char *
 	 ./xargs -P 200 -n 20  sh -c 'echo "$@"; sleep $((1 + $RANDOM % 5))' sleeper
       */
       wait_for_proc (false, 0u);
-
+	  child=0;
+#ifndef _WIN32
       if (pipe (fd))
 	die (EXIT_FAILURE, errno, _("could not create pipe before fork"));
       fcntl (fd[1], F_SETFD, FD_CLOEXEC);
@@ -1318,7 +1333,36 @@ xargs_do_exec (struct buildcmd_control *ctl, void *usercontext, int argc, char *
          try again.  */
       while ((child = fork ()) < 0 && errno == EAGAIN && procs_executing)
 	wait_for_proc (false, 1u);
+#else
+	//this code likely would work for all platforms
+
+	if (bc_args_exceed_testing_limit (argv))//this works but single threaded
+	      errno = E2BIG;
+	else{
+		int fd_stdin = dup(STDIN_FILENO);//backup stdin incase prep changes it
+		prep_child_for_exec();
+		errno = execute(argv[0],argv[0],argv,NULL,false,false,false,false,true,false,NULL);
+		dup2(fd_stdin,STDIN_FILENO);//restore stdin
+		close(fd_stdin);
+	}
+
+	if (errno != 0){
+		 if (E2BIG == errno)
+	      {
+		return 0; /* Failure; caller should pass fewer args */
+	      }
+	    else if (ENOENT == errno)
+	      {
+		exit (XARGS_EXIT_COMMAND_NOT_FOUND); /* command cannot be found */
+	      }
+	    else
+	      {
+		exit (XARGS_EXIT_COMMAND_CANNOT_BE_RUN); /* command cannot be run */
+	      }
+	}else
+		return 1;
 
+#endif
       switch (child)
 	{
 	case -1:
@@ -1368,7 +1412,7 @@ xargs_do_exec (struct buildcmd_control *ctl, void *usercontext, int argc, char *
 	default:
 	  {
 	    /* Parent */
-	    close (fd[1]);
+	    close (fd[1]); //closing the write end
 	  }
 
 	} /* switch (child) */
@@ -1462,6 +1506,10 @@ static unsigned int
 add_proc (pid_t pid)
 {
   unsigned int i, j;
+#ifdef  _WIN32//win is always one at a time we dont want to increment the running count here as we don't use the reap/decrement counter in win32
+  procs_executed = true;
+  return 0;
+#endif //  _WIN32
 
   /* Find an empty slot.  */
   for (i = 0; i < pids_alloc && pids[i]; i++)
@@ -1496,6 +1544,7 @@ static void
 wait_for_proc (bool all, unsigned int minreap)
 {
   unsigned int reaped = 0;
+#ifndef _WIN32
 
   while (procs_executing)
     {
@@ -1590,6 +1639,7 @@ wait_for_proc (bool all, unsigned int minreap)
       if (WEXITSTATUS (status) != 0)
 	child_error = XARGS_EXIT_CLIENT_EXIT_NONZERO;
     }
+#endif
 }
 
 /* Wait for all child processes to finish.  */
